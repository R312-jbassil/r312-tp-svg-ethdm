---
import Layout from "../../layouts/Layout.astro";
import pb from "../../utils/pb";
import { Collections, type SvgRecord } from "../../utils/pocketbase-types";

export const prerender = false;

const id = Astro.params.id;

if (Astro.request.method === "POST") {
    try {
        const formData = await Astro.request.formData();
        const editPrompt = formData.get("editPrompt") as string;
        const history = JSON.parse((formData.get("history") as string) || "[]");

        const currentSvg = await pb.collection(Collections.Svg).getOne(id);

        const messages = [
            ...history,
            {
                role: "user",
                content: `SVG actuel:\n${currentSvg.code_svg}\n\nModification demandée: ${editPrompt}`,
            },
        ];

        const response = await fetch(new URL("/api/generateSVG", Astro.url), {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(messages),
        });

        if (!response.ok) {
            throw new Error(`API Error: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        
        if (!data || !data.svg || !data.svg.content) {
            throw new Error("Invalid response from generateSVG API");
        }

        const newSvgCode = data.svg.content;

        const updatedHistory = [
            ...history,
            { role: "user", content: editPrompt },
            { role: "assistant", content: newSvgCode },
        ];

        await pb.collection(Collections.Svg).update(id, {
            code_svg: newSvgCode,
            chat_history: updatedHistory,
        });

        return Astro.redirect(`/gallery/${id}`);
    } catch (error) {
        console.error("Erreur lors de la soumission:", error);
    }
}

const svg: SvgRecord = await pb.collection(Collections.Svg).getOne(id, {
    expand: "chat_history",
});

const messages = svg.expand?.chat_history || [];
---

<Layout title={`SVG - ${svg.name || id}`}>
    <main class="container mx-auto p-8">
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold">Galerie SVG</h1>
            <a href="/gallery" class="btn btn-ghost">← Retour à la galerie</a>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <section class="card bg-base-200">
                <div class="card-body">
                    <h2 class="card-title">Image SVG</h2>
                    <div
                        class="bg-base-100 rounded-box p-8 flex justify-center items-center min-h-[300px]"
                        id="svg-container"
                        set:html={svg.code_svg}
                    />

                    <div class="card bg-base-100 p-4 mt-4">
                        <p><strong>ID:</strong> {svg.id}</p>
                        {
                            svg.name && (
                                <p>
                                    <strong>Nom:</strong> {svg.name}
                                </p>
                            )
                        }
                        <p>
                            <strong>Créé le:</strong>
                            {new Date(svg.created).toLocaleDateString("fr-FR")}
                        </p>
                        <p>
                            <strong>Modifié le:</strong>
                            <span id="updated-date">
                                {
                                    new Date(svg.updated).toLocaleDateString(
                                        "fr-FR",
                                    )
                                }
                            </span>
                        </p>
                    </div>
                </div>
            </section>

            <section class="card bg-base-200 flex flex-col h-[600px]">
                <div class="card-body flex flex-col h-full p-0">
                    <h2 class="card-title p-4 pb-0">Chat d'édition (Rafraichir la page pour obtenir le code svg)</h2>

                    <div
                        id="chat-history"
                        class="flex-1 overflow-y-auto p-4 space-y-3"
                    >
                        {
                            Array.isArray(svg?.chat_history) &&
                            svg.chat_history.length > 0 ? (
                                svg.chat_history.map(
                                    (msg: {
                                        role: string;
                                        content: string;
                                    }) => (
                                        <div
                                            class={`chat ${msg.role === "user" ? "chat-start" : "chat-end"}`}
                                        >
                                            <div
                                                class={`chat-bubble ${msg.role === "user" ? "bg-primary text-primary-content" : "bg-secondary text-secondary-content"}`}
                                            >
                                                <pre class="whitespace-pre-wrap text-sm">
                                                    {msg.content}
                                                </pre>
                                            </div>
                                            <div class="chat-footer opacity-60 text-xs mt-1">
                                                {msg.role}
                                            </div>
                                        </div>
                                    ),
                                )
                            ) : (
                                <div class="flex items-center justify-center h-full">
                                    <span class="text-base-content opacity-50">
                                        Aucun historique de chat.
                                    </span>
                                </div>
                            )
                        }
                    </div>

                    <div class="border-t border-base-300 p-4">
                        <form
                            id="input-prompt-form"
                            class="flex flex-col gap-2 w-full"
                            method="POST"
                            autocomplete="off"
                        >
                            <input
                                type="hidden"
                                name="history"
                                id="history-input"
                                value={JSON.stringify(svg?.chat_history || [])}
                            />
                            <input type="hidden" name="id" value={svg?.id} />
                            <div class="flex items-center gap-2">
                                <input
                                    id="prompt-input"
                                    name="editPrompt"
                                    type="text"
                                    class="input flex-grow"
                                    placeholder="Enter a prompt to edit the SVG..."
                                    required
                                />
                                <button class="btn btn-primary" type="submit" id="submit-btn"
                                    >Edit</button
                                >
                            </div>
                        </form>
                    </div>
                </div>
            </section>
        </div>
    </main>
</Layout>

<script>
    //@ts-nocheck
    const form = document.getElementById('input-prompt-form');
    const svgPreview = document.getElementById('svg-container');
    const chatHistory = document.getElementById('chat-history');
    const submitBtn = document.getElementById('submit-btn');

    async function generateSVG(messages) {
        const response = await fetch('/api/generateSVG', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(messages)
        });
        
        if (!response.ok) {
            throw new Error(`API Error: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (!data || !data.svg || !data.svg.content) {
            throw new Error('Invalid API response');
        }
        
        return data.svg.content;
    }

    async function updateSVG(updatedData) {
        const response = await fetch('/api/updateSVG', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedData)
        });

        const data = await response.json();

        if (data.success) {
            console.log("SVG updated successfully in database");
        } else {
            throw new Error(data.error || "Failed to update SVG");
        }

        return data;
    }

    form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(form);
        const promptValue = formData.get('editPrompt');
        
        if (!promptValue || promptValue.trim() === '') {
            return;
        }

        console.log(JSON.stringify(Object.fromEntries(formData)));

        submitBtn.disabled = true;
        submitBtn.textContent = 'Processing...';

        let prompt = {
            role: 'user',
            content: promptValue
        };

        let history = JSON.parse(formData.get('history') || '[]');
        
        const currentSvg = svgPreview.innerHTML.trim();

        document.getElementById('prompt-input').value = '';
        
        chatHistory.innerHTML += `<div class="chat chat-start">
            <div class="chat-bubble bg-primary text-primary-content">
                <pre class="whitespace-pre-wrap text-sm">${prompt.content}</pre>
            </div>
            <div class="chat-footer opacity-60 text-xs mt-1">user</div>
        </div>`;
        
        chatHistory.scrollTop = chatHistory.scrollHeight;

        try {
            const messages = [
                ...history,
                {
                    role: 'user',
                    content: `SVG actuel:\n${currentSvg}\n\nModification demandée: ${prompt.content}`
                }
            ];

            const loadingDiv = document.createElement('div');
            loadingDiv.id = 'loading-indicator';
            loadingDiv.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
            svgPreview.appendChild(loadingDiv);

            let aiResponse = await generateSVG(messages);
            
            if (!aiResponse) {
                throw new Error('Empty response from API');
            }

            const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
            const svgCode = svgMatch ? svgMatch[0] : aiResponse;

            console.log("svgCode: ", svgCode);
            
            const loadingIndicator = document.getElementById('loading-indicator');
            if (loadingIndicator) {
                loadingIndicator.remove();
            }

            svgPreview.innerHTML = svgCode;

            history.push(prompt);
            history.push({ role: 'assistant', content: svgCode });

            chatHistory.innerHTML += `<div class="chat chat-end">
                <div class="chat-bubble bg-secondary text-secondary-content">
                    <pre class="whitespace-pre-wrap text-sm">SVG modifié avec succès</pre>
                </div>
                <div class="chat-footer opacity-60 text-xs mt-1">assistant</div>
            </div>`;

            document.getElementById('history-input').value = JSON.stringify(history);

            chatHistory.scrollTop = chatHistory.scrollHeight;

            await updateSVG({
                id: formData.get('id'),
                code_svg: svgCode,
                chat_history: history
            });

            console.log("✅ Données mises à jour avec succès dans PocketBase");

        } catch (error) {
            console.error('Erreur:', error);
            
            const loadingIndicator = document.getElementById('loading-indicator');
            if (loadingIndicator) {
                loadingIndicator.remove();
            }
            
            chatHistory.innerHTML += `<div class="chat chat-end">
                <div class="chat-bubble bg-error text-error-content">
                    <pre class="whitespace-pre-wrap text-sm">Erreur: ${error.message}</pre>
                </div>
                <div class="chat-footer opacity-60 text-xs mt-1">système</div>
            </div>`;
            
            chatHistory.scrollTop = chatHistory.scrollHeight;
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Edit';
        }
    });
</script>
