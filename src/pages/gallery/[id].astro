---
import Layout from "../../layouts/Layout.astro";
import pb from "../../utils/pb";
import { Collections, type SvgRecord } from "../../utils/pocketbase-types";

const id = Astro.params.id;

if (Astro.request.method === "POST") {
    try {
        const formData = await Astro.request.formData();
        const editPrompt = formData.get("editPrompt") as string;
        const history = JSON.parse((formData.get("history") as string) || "[]");

        const currentSvg = await pb.collection(Collections.Svg).getOne(id);

        const messages = [
            ...history,
            {
                role: "user",
                content: `SVG actuel:\n${currentSvg.code_svg}\n\nModification demandée: ${editPrompt}`,
            },
        ];

        const generateResponse = await fetch(
            new URL("/api/generateSVG", Astro.url),
            {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(messages),
            },
        );

        const generateData = await generateResponse.json();
        const newSvgCode = generateData.svg.content;

        const updatedHistory = [
            ...history,
            { role: "user", content: editPrompt },
            { role: "assistant", content: newSvgCode },
        ];

        const updateResponse = await fetch(
            new URL("/api/updateSVG", Astro.url),
            {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    id: formData.get("id"),
                    code_svg: newSvgCode,
                    chat_history: updatedHistory,
                }),
            },
        );

        const updateData = await updateResponse.json();

        if (updateData.success) {
            console.log("SVG mis à jour avec succès:", updateData.id);
            return Astro.redirect(`/gallery/${id}`);
        } else {
            console.error("Échec de la mise à jour du SVG:", updateData.error);
            return Astro.redirect(`/gallery/${id}?error=update_failed`);
        }
    } catch (error) {
        console.error("Erreur lors de la soumission:", error);
        return Astro.redirect(`/gallery/${id}?error=server_error`);
    }
}

const svg: SvgRecord = await pb.collection(Collections.Svg).getOne(id, {
    expand: "chat_history",
});

const messages = svg.expand?.chat_history || [];

const urlParams = new URL(Astro.request.url).searchParams;
const errorParam = urlParams.get("error");
---

<Layout title={`SVG - ${svg.name || id}`}>
    <main class="container mx-auto p-8">
        {
            errorParam && (
                <div class="alert alert-error mb-4">
                    <span>
                        {errorParam === "update_failed"
                            ? "Échec de la mise à jour du SVG. Veuillez réessayer."
                            : "Une erreur serveur s'est produite."}
                    </span>
                </div>
            )
        }

        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold">Galerie SVG</h1>
            <a href="/gallery" class="btn btn-ghost">← Retour à la galerie</a>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <section class="card bg-base-200">
                <div class="card-body">
                    <h2 class="card-title">Image SVG</h2>
                    <div
                        class="bg-base-100 rounded-box p-8 flex justify-center items-center min-h-[300px]"
                        id="svg-container"
                        set:html={svg.code_svg}
                    />
                    <div
                        id="chat-history"
                        class="flex flex-col gap-4 w-full mb-20 overflow-y-auto flex-grow"
                    >
                        {
                            Array.isArray(svg?.chat_history) &&
                            svg.chat_history.length > 0 ? (
                                svg.chat_history.map(
                                    (msg: {
                                        role: string;
                                        content: string;
                                    }) => (
                                        <div
                                            class={`chat ${msg.role === "user" ? "chat-start" : "chat-end"}`}
                                        >
                                            <div
                                                class={`chat-bubble ${msg.role === "user" ? "bg-primary text-primary-content" : "bg-secondary text-secondary-content"}`}
                                            >
                                                <pre>{msg.content}</pre>
                                            </div>
                                            <div class="chat-footer opacity-60 text-xs mt-1">
                                                {msg.role}
                                            </div>
                                        </div>
                                    ),
                                )
                            ) : (
                                <span class="text-error">
                                    Aucun historique de chat.
                                </span>
                            )
                        }
                    </div>
                    <div class="card bg-base-100 p-4 mt-4">
                        <p><strong>ID:</strong> {svg.id}</p>
                        {
                            svg.name && (
                                <p>
                                    <strong>Nom:</strong> {svg.name}
                                </p>
                            )
                        }
                        <p>
                            <strong>Créé le:</strong>
                            {new Date(svg.created).toLocaleDateString("fr-FR")}
                        </p>
                        <p>
                            <strong>Modifié le:</strong>
                            <span id="updated-date">
                                {
                                    new Date(svg.updated).toLocaleDateString(
                                        "fr-FR",
                                    )
                                }
                            </span>
                        </p>
                    </div>
                </div>
            </section>

            <section class="card bg-base-200 flex flex-col h-[600px]">
                <div class="card-body flex flex-col h-full p-0">
                    <h2 class="card-title p-4 pb-0">Chat d'édition</h2>

                    <div
                        id="chat-history"
                        class="flex-1 overflow-y-auto p-4 space-y-3"
                    >
                        {
                            Array.isArray(svg?.chat_history) &&
                            svg.chat_history.length > 0 ? (
                                svg.chat_history.map(
                                    (msg: {
                                        role: string;
                                        content: string;
                                    }) => (
                                        <div
                                            class={`chat ${msg.role === "user" ? "chat-start" : "chat-end"}`}
                                        >
                                            <div
                                                class={`chat-bubble ${msg.role === "user" ? "bg-primary text-primary-content" : "bg-secondary text-secondary-content"}`}
                                            >
                                                {msg.role === "assistant" &&
                                                msg.content.includes("<svg") ? (
                                                    <div
                                                        class="bg-white rounded p-2 max-w-[200px] max-h-[200px] flex items-center justify-center"
                                                        set:html={msg.content}
                                                    />
                                                ) : (
                                                    <pre class="whitespace-pre-wrap text-sm">
                                                        {msg.content}
                                                    </pre>
                                                )}
                                            </div>
                                            <div class="chat-footer opacity-60 text-xs mt-1">
                                                {msg.role}
                                            </div>
                                        </div>
                                    ),
                                )
                            ) : (
                                <div class="flex items-center justify-center h-full">
                                    <span class="text-base-content opacity-50">
                                        Aucun historique de chat.
                                    </span>
                                </div>
                            )
                        }
                    </div>

                    <div class="border-t border-base-300 p-4">
                        <form
                            id="input-prompt-form"
                            class="flex gap-2"
                            method="POST"
                            autocomplete="off"
                        >
                            <input
                                type="hidden"
                                name="history"
                                value={JSON.stringify(svg?.chat_history)}
                            />
                            <input type="hidden" name="id" value={svg?.id} />
                            <input
                                id="prompt-input"
                                name="editPrompt"
                                type="text"
                                class="input input-bordered flex-1"
                                placeholder="Décrivez vos modifications..."
                                required
                            />
                            <button class="btn btn-primary" type="submit">
                                Envoyer
                            </button>
                        </form>
                    </div>
                </div>
            </section>
        </div>
    </main>

    <script define:vars={{ svgId: svg.id, svgContent: svg.code_svg }}>
        const chatHistory = document.getElementById("chat-history");
        if (chatHistory) {
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }
    </script>
</Layout>
