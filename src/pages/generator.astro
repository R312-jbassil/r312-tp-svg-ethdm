---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Générateur IA">
  <main class="container">    
    <div class="generator-interface">

      <div class="preview-section">
        <div class="preview-box">
          <div id="image-display">
            <p class="placeholder-text">Votre image générée apparaîtra ici...</p>
          </div>
        </div>
      </div>


      <div class="code-section">
        <div class="code-editor">
          <div class="editor-header">
            <span class="editor-title">Code SVG généré</span>
          </div>
        </div>
      </div>
    </div>


    <div class="control-panel">
      <input type="text" id="prompt-input" placeholder="Décrivez l'image que vous voulez générer (ex: voiture bleue, maison, arbre...)" />
      <button id="generate-btn" class="generate-button">Générer</button>
    </div>
  </main>

  <script>

    document.addEventListener('DOMContentLoaded', function() {

      const generateBtn = document.getElementById('generate-btn');
      const outputArea = document.getElementById('output-area');
      const promptInput = document.getElementById('prompt-input');
      const quickPrompt = document.getElementById('quick-prompt');
      const complexitySlider = document.getElementById('complexity');
      const complexityValue = document.getElementById('complexity-value');


      if (!generateBtn || !outputArea || !promptInput || !quickPrompt || !complexitySlider || !complexityValue) {
        console.error('Certains éléments ne sont pas trouvés');
        return;
      }


      complexitySlider.addEventListener('input', function() {
        complexityValue.textContent = this.value;
      });


      generateBtn.addEventListener('click', function() {
        const prompt = promptInput.value || quickPrompt.value;
        
        if (!prompt.trim()) {
          alert('Veuillez entrer un prompt !');
          return;
        }


        const styleSelect = document.getElementById('style-select');
        const currentStyle = styleSelect.value;
        const currentComplexity = complexitySlider.value;


        outputArea.innerHTML = '<div class="loading">Génération en cours...</div>';
        

        setTimeout(() => {
          outputArea.innerHTML = `
            <div class="generated-content">
              <h3>Résultat généré :</h3>
              <p><strong>Prompt :</strong> ${prompt}</p>
              <div class="result-box">
                <p>Voici le contenu généré par l'IA basé sur votre demande.</p>
                <p><strong>Style :</strong> ${currentStyle}</p>
                <p><strong>Complexité :</strong> ${currentComplexity}/10</p>
                <p><strong>Timestamp :</strong> ${new Date().toLocaleTimeString()}</p>
              </div>
            </div>
          `;
          

          promptInput.value = '';
          quickPrompt.value = '';
        }, 2000);
      });


      quickPrompt.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          generateBtn.click();
        }
      });


      promptInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && e.ctrlKey) {
          generateBtn.click();
        }
      });
    });
  </script>

 <style>
  body {
    margin: 0;
    font-family: Arial, sans-serif;
    background: #fff;
    color: #000;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  h1 {
    text-align: center;
    color: #000;
    margin-bottom: 20px;
    font-size: 2em;
  }

  .generator-interface {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-bottom: 20px;
    min-height: 300px;
  }

  .preview-section {
    background: #000;
    padding: 15px;
    color: #fff;
  }

  .preview-box {
    background: #fff;
    height: 100%;
    padding: 15px;
    border: 1px solid #ccc;
  }

  #image-display {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }

  #svg-code {
    height: 100%;
    background: #000;
    color: #fff;
    padding: 10px;
    font-family: monospace;
    font-size: 12px;
    line-height: 1.4;
    overflow: auto;
  }

  .placeholder-text {
    color: #777;
    font-style: italic;
  }

  .code-section {
    background: #222;
    padding: 10px;
  }

  .editor-header {
    background: #333;
    padding: 10px;
    color: #fff;
    font-weight: bold;
  }

  #prompt-input {
    width: 100%;
    height: 100px;
    background: #f2f2f2;
    color: #000;
    border: 1px solid #ccc;
    padding: 10px;
    font-family: monospace;
    font-size: 14px;
    resize: none;
  }

  .settings {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .setting-group {
    display: flex;
    align-items: center;
    gap: 10px;
    color: #000;
  }

  .setting-group select,
  .setting-group input {
    flex: 1;
    padding: 6px;
    border: 1px solid #ccc;
    background: #fff;
    color: #000;
  }

  .control-panel {
    display: flex;
    gap: 10px;
    align-items: center;
    background: #f9f9f9;
    padding: 10px;
    border: 1px solid #ddd;
  }

  .generate-button {
    background: #000;
    color: #fff;
    border: none;
    padding: 10px 20px;
    font-size: 14px;
    cursor: pointer;
  }

  .loading {
    text-align: center;
    color: #555;
    font-style: italic;
  }

  .result-box {
    background: #f2f2f2;
    padding: 10px;
    border-left: 3px solid #000;
    margin-top: 10px;
    font-size: 14px;
  }

  @media (max-width: 768px) {
    .generator-interface {
      grid-template-columns: 1fr;
    }
    .control-panel {
      flex-direction: column;
    }
  }
</style>

</Layout>